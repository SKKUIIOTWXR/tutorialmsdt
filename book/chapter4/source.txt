############################## DigitalTwinsManager.cs

using Azure.DigitalTwins.Core;
using Azure.Identity;
using System;
using System.IO;
namespace SmartBuildingConsoleApp.DigitalTwins
{
    public class DigitalTwinsManager
    {
        private static readonly string adtInstanceUrl = "<Azure Digital Twins Instance URL>";
        private DigitalTwinsClient client;
        public DigitalTwinsManager()
        {
            Connect();
        }
        public void Connect()
        {
            var cred = new DefaultAzureCredential();
            client = new DigitalTwinsClient(new Uri(adtInstanceUrl), cred);
        }

        public void CreateModel(string path)
        {
            using var modelStreamReader = new StreamReader(path);
            string dtdl = modelStreamReader.ReadToEnd();
            string[] dtdls = new string[] { dtdl };
            client.CreateModels(dtdls);
        }

    }
}

############################## Program.cs

using SmartBuildingConsoleApp.DigitalTwins;
using System;

namespace SmartBuildingConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            DigitalTwinsManager dtHelper = new DigitalTwinsManager();
            // TODO

            string path = "Models/Chapter4/room.json";
            dtHelper.CreateModel(path);
        }
    }
}

############################## room.json

{
  "@id": "dtmi:com:smartbuilding:Room;1",
  "@type": "Interface",
  "@context": "dtmi:dtdl:context;2",
  "displayName": "Room"
}

############################## CreateModel() in DigitalTwinsManager class

public bool CreateModel(string path)
{
    return CreateModels(new string[] { path });
}
public bool CreateModels(string[] path)
{
    List<string> dtdls = new List<string>();
    foreach (string p in path)
    {
        using var modelStreamReader = new StreamReader(p);
        string dtdl = modelStreamReader.ReadToEnd();
        dtdls.Add(dtdl);
    }
    try
    {
        DigitalTwinsModelData[] models = client.CreateModels(dtdls.ToArray());
    }
    catch (RequestFailedException)
    {
        return false;
    }
    return true;
}

############################## //TODO in Program.cs

            string[] paths = new string[] {
                "Models/chapter4/campus.json",
                "Models/chapter4/building.json",
                "Models/chapter4/floor.json",
                "Models/chapter4/workarea.json",
                "Models/chapter4/sensor.json"
            };
            dtHelper.CreateModels(paths);
